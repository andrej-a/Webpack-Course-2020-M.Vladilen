1) В папке src обычно хранятся исходники проекта.
2) Инициализация приложения: npm init. Дальше -- базовые настройки. Итогом создается package.json
3) Дальше нужно установить webpack:
    -- npm install -D webpack webpack-cli
    (флаг -D означает, что зависимости сохраняются только для разработки)
4) Создание конфигурационного файла: webpack.config.js и его настройка (комментарии прописаны в файле).
Запускаем команду webpack. В корне проекта создается папка (имя папки) и файл bundle.js.
  4.1) npm install -D html-webpack-plugin -- устанавливаем плагин для webpack, чтобы работать с файлами,
  имя которых динамически меняется на кэш (см. паттерн [contenthash] в файле настройки)
  4.2) npm install -D clean-webpack-plugin -- очищает неактуальные файлы
5) В файле package.json-->scripts можно указать быстрые команды. Например:
    -- "dev": "webpack --mode development" по команде npm run dev пересобирает проект в режиме разработчика
    -- "build": "webpack --mode production" по команде npm run build пересоберет в режиме продакшн
6)loader -- возможность добавления к webpack функционала, позволяющего ему работать с другими типами файлов. Например,
CSS. Смотри лоадер в webpack.config.
    6.1) npm install -D css-loader style-loader -- установка лоадеров для использования в файле настроек
7)Работа с JSON. По умолчанию, в обычный js нельзя подгрузить .json.
В вебпаке -- можно: import nameJSONFile from 'adress'. Фигурные скобки, при импорте JSON, не ставятся.
8) Работа с картинками.
Webpack не понимает расширения картинок. Для этого, как и в случае css, нужен лоадер.
    --npm install -D file-loader
Остальное в файле webpack.config.
9) Работа со шрифтами.
Инсталированный file-loader умеет работать и со шрифтами. При этом мы ничего не импортируем, просто скачиваем
шрифт и дальше см. в файлк css.
10) Работа со сторонними библиотеками. Например, JQ. Сначала устанавливаем:
    --npm install -S jquery, а дальше импортируем в главном файле.
Если несколько файлов используют одну и ту же библиотеку, то прописываем оптимизацию (см. настройки). 
Создается новый файл venders с общим кодом.
11) Копирование файлов при помощи webpack.
Устанавливаем npm install -D copy-webpack-plugin. Остальное в файле настроек.
12) Работа с CSS как с отдельным файлом для дальнейшей оптимизации.
Устанваливаем npm install -D mini-css-extract-plugin. Дальше файл настроек.
13)Оптимизация CSS.
Устанавливаем npm install -D terser-webpack-plugin и npm install -D optimize-css-assets-webpack-plugin
14) Работа с .less
Устанавливаем npm install -D less-loader и npm install -D less. Дальше файл настроек.
С .sass принцип такой же.
15)Работа с babel.
Установка npm i -D babel-loader @babel/core. Файл настроек.
А еще в babel нужно настроить пресеты npm install --save-dev @babel/preset-env. 
И полифилы npm install --save @babel/polyfill.
И плагины.

